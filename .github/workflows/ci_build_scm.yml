name: CI test to build SCM

on: [push, pull_request]

jobs:
  build-linux:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        fortran-compiler: [gfortran, ifort]
    env:
      F90: ${{ matrix.fortran-compiler }}
      FC: ${{ matrix.fortran-compiler }}
      F90FLAGS: "-O3 -ffree-line-length-none -fcheck=bounds -finit-real=nan"
      ATOL: 0.0
      RTOL: 0.0
      #KGO_VERSION: v001
      KGO_VERSION: v002
      NFHOME: /home/runner/netcdf-fortran
      LD_LIBRARY_PATH: /home/runner/netcdf-fortran/lib

    steps:

    ###############################################################################
    # Setup
    ###############################################################################

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Initialize submodules
      run: git submodule update --init --recursive
    
    - name: Set up Python 3.8.5
      uses: actions/setup-python@v3
      with:
        python-version: 3.8.5

    - name: Add conda to system path
      run: |
        # $CONDA is an environment variable pointing to the root of the miniconda directory
        echo $CONDA/bin >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        conda install --yes -c conda-forge f90nml

    ###############################################################################
    # FORTRAN compilers
    ###############################################################################

    - name: Install gfortran compiler
      if: contains(matrix.fortran-compiler, 'gfortran')
      run: sudo apt-get install ${{ matrix.fortran-compiler }}

    - name: cache-intel-compilers
      id: cache-intel-compilers
      if: contains(matrix.fortran-compiler, 'ifort')
      uses: actions/cache@v2
      with:
        path: /opt/intel
        key: intel-${{ runner.os }}-compilers-b

    - name: Install Intel compilers and libraries
      if: contains(matrix.fortran-compiler, 'ifort') && steps.cache-intel-compilers.outputs.cache-hit != 'true'
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
        sudo apt-get update
        sudo apt-get install intel-hpckit-getting-started intel-oneapi-clck intel-oneapi-common-licensing intel-oneapi-common-vars
        sudo apt-get install intel-oneapi-dev-utilities  intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-compiler-fortran intel-oneapi-itac

    ###############################################################################
    # Compiler-specific environment
    ###############################################################################

    - name: Environment for ifort compiler
      if: contains(matrix.fortran-compiler, 'ifort')
      run: |
        echo "CC=icx" > $GITHUB_ENV
        echo "FC=ifort" > $GITHUB_ENV
        echo "F90FLAGS=-O3 -heap-arrays" > $GITHUB_ENV

    ###############################################################################
    # NetCDF C and FORTRAN libraries
    ###############################################################################
    - name: Install NetCDF library
      run: sudo apt-get install libnetcdf-dev

    - name: cache-netcdf-fortran
      id: cache-netcdf-fortran
      uses: actions/cache@v2
      with:
        path: /home/runner/netcdf-fortran
        key: netcdf-fortran-4.4.4a-${{ runner.os }}-${{ matrix.fortran-compiler }}-v02

    - name: Build NetCDF FORTRAN library
      env:
        FCFLAGS: -fPIC
      if: steps.cache-netcdf-fortran.outputs.cache-hit != 'true'
      run: |
        source /opt/intel/oneapi/setvars.sh || true
        ${F90} --version
        git clone https://github.com/Unidata/netcdf-fortran.git --branch v4.4.4
        cd netcdf-fortran
        ./configure --prefix=${NFHOME}
        make -j
        sudo make install

    ###############################################################################
    #
    ###############################################################################

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/ccpp/physics

    - name: Build
      run: cmake --build ${{github.workspace}}/ccpp/physics --config ${{env.BUILD_TYPE}}